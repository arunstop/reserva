generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password    String    @db.VarChar(30)
  email       String    @unique
  name        String
  phone       String    @db.VarChar(15)
  role        Role      @default(USER)
  dateDeleted DateTime?
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt @default(now())
  booking     Booking[]
  Event       Event[]
  profile     Profile?
  vendors     Vendor[]
}

model Profile {
  id     String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bio    String?
  userId String  @unique @db.Uuid
  user   User    @relation(fields: [userId], references: [id])
}

model Vendor {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @db.VarChar(100)
  address     String
  dateDeleted DateTime?
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt @default(now())
  ownerId     String    @db.Uuid
  owner       User      @relation(fields: [ownerId], references: [id])
}

model Event {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String     @unique
  type        String
  address     String
  dateStart   String
  dateEnd     String
  desc        String     @db.VarChar(1000)
  thumbnail   String
  dateDeleted DateTime?
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @updatedAt @default(now())
  userId      String     @db.Uuid
  booking     Booking[]
  discount    Discount[]
  user        User       @relation(fields: [userId], references: [id])
  tickets     Ticket[]
}

model Ticket {
  id          String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String           @db.VarChar(50)
  max         Int
  price       Int
  dateStart   DateTime?
  dateEnd     DateTime?
  dateDeleted DateTime?
  dateCreated DateTime         @default(now())
  dateUpdated DateTime         @updatedAt @default(now())
  eventId     String           @db.Uuid
  booking     BookingDetails[]
  event       Event            @relation(fields: [eventId], references: [id])
}

model Booking {
  id          String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  qr          String
  dateDeleted DateTime?
  dateCreated DateTime         @default(now())
  dateUpdated DateTime         @updatedAt @default(now())
  type        String
  userId      String           @db.Uuid
  eventId     String           @db.Uuid
  event       Event            @relation(fields: [eventId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  details     BookingDetails[]
  payments    Payment[]
}

model BookingDetails {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  qty         Int
  dateDeleted DateTime?
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt @default(now())
  bookingId   String    @db.Uuid
  ticketId    String    @db.Uuid
  booking     Booking   @relation(fields: [bookingId], references: [id])
  ticket      Ticket    @relation(fields: [ticketId], references: [id])
}

model Payment {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  amountRequired Int
  amountPaid     Int
  amountCut      Int
  dateLimit      DateTime
  datePaid       DateTime?
  dateDeleted    DateTime?
  dateCreated    DateTime   @default(now())
  dateUpdated    DateTime   @updatedAt @default(now())
  bookingId      String     @db.Uuid
  discount       Discount[]
  booking        Booking    @relation(fields: [bookingId], references: [id])
}

model Discount {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  amountPercentage Int
  amount           Int
  eventId          String?  @db.Uuid
  paymentId        String?  @db.Uuid
  Event            Event?   @relation(fields: [eventId], references: [id])
  Payment          Payment? @relation(fields: [paymentId], references: [id])
}

enum Role {
  USER
  ADMIN
  VENDOR
}
